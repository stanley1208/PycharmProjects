EX1.
int a=0,b=0

for(i=0;i<N;i++){ # O(N)+O(N)=2*O(N)=O(N)
    a=a+rand(); # N*1個操作=O(N)
    b=b+rand(); # N*1個操作=O(N)
}
for(j=0;j<N/2;j++){
    b=b+rand(); # N/2*1個操作=1/2*O(N)=O(N)
}

時間複雜度?
O(N)
空間複雜度?
2個單位內存空間 = O(1) # constant space complexity

EX2.
int a=0;
for(i=0;i<N;i++){
    for(j=N;j>i;j--){
        a=a+i+j;
    }
}

i=0:j=N...1     N
i=1:j=N...2     N-1
i=2:j=N...3     N-2
    .
    .
    .
i=N-1;j=N...N   1
total=1+2+3+...+N=N(N+1)/2=N*N/2+N/2
=>1/2*O(N^2)+1/2*O(N)=O(N^2)+O(N)=O(N^2)

時間複雜度?O(N^2)
空間複雜度?O(1)

EX3.
int i,j,k=0;
for(i=n/2;i<=n;i++){
    for(j=2;j<=n;j=j*2){
        k=k+n/2;
    }
}
O(n log n)

EX4.
int a=0,i=N;
while(i>0){
    a+=i;  # 一個操作
    i/=2;  # 一個操作
}

N=40; i=40
i=20 2
i=10 2
i=5  2
i=2  2
i=1  2
i=0  2
terminate
2*log(N)=2*O(log N)=O(log N)

EX5.
我們每當說算法X的效率要高於Y時指的是? 時間複雜度
X: O(log n)>Y:O(n)
X: O(n log n)>Y:O(n^2)

X實際的效率(秒)>Y實際的效率(秒) 不一定 !!!
除非n足夠大

定理: if x的時間複雜度要優於y的時間複雜度，那麼，假設在一個足夠大的數M，當n>M時，
我們可以保證x的實際效率要優於y的實際效率

C*O(N)=O(N) if only if C跟N沒有相關性

O(1) < O(log n) < O(n) < O(n^2) < O(n^3) < ... < O(2^n) < O(3^n) < .....
O(log n):尋找一個element (從tree,heap),binary search




